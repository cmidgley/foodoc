function setupMermaid() {
    mermaid.initialize({
        useMaxWidth: !1,
        theme: "neutral",
        disableScript: !1,
        securityLevel: "loose",
        flowchart: {
            nodeSpacing: 20,
            rankSpacing: 40,
            htmlLabels: !1
        }
    }), $.expr[":"].containsMember = function(el, i, m) {
        var searchText = m[3], match = $(el).text().trim().match("^" + searchText + "(\\(\\))?$");
        return match && 0 < match.length;
    }, $().ready(function() {
        mermaid._customRules = [];
        var mermaidID = 0;
        $(".language-mermaid code").replaceWith(function() {
            var styleRules = [], filterRules = [], text = $(this).text().replace(/^\s*(style|filter)\s+(\S+?)(?:\.(\S+?))?\s+(\S+?)\s*$/gm, function(fullMatch, rule, codeClass, codeMember, cssClass) {
                return "style" == rule ? styleRules.push({
                    codeClass: codeClass,
                    codeMember: codeMember,
                    cssClass: cssClass
                }) : filterRules.push({
                    codeClass: codeClass,
                    codeMember: codeMember,
                    cssClass: cssClass
                }), "";
            });
            return (styleRules.length || filterRules.length) && mermaid._customRules.push({
                elem: $(this).parent(),
                styleRules: styleRules,
                filterRules: filterRules
            }), "<code id='mermaid-" + ++mermaidID + "' class='filtered-mermaid'></code><div id='md-mermaid-" + mermaidID + "' style='display: none'>" + text + "</div>";
        }), mermaid.rerender();
    }), mermaid.rerender = function() {
        mermaid._customRules && ($(".filtered-mermaid").each(function() {
            var elementId = $(this).attr("id"), markdown = $("#md-" + elementId).text();
            mermaid._customRules.forEach(function(section) {
                section.elem.find("code").attr("id") === elementId && section.filterRules.forEach(function(rule) {
                    if ("!" == rule.cssClass.charAt(0) ? !section.elem.closest("." + rule.cssClass.substring(1)).length : section.elem.closest("." + rule.cssClass).length) {
                        var filter = "(class\\s+" + rule.codeClass + "\\s+{.*?)(" + rule.codeMember + "(?:\\(\\))?)(.*?})";
                        markdown = markdown.replace(new RegExp(filter, "gs"), "$1$3");
                    }
                });
            }), markdown = markdown.replace(/^\s*\n/gm, ""), $(this).html(mermaid.render("rend-" + $(this).attr("id"), markdown));
        }), mermaid._customRules.forEach(function(section) {
            section.styleRules.forEach(function(rule) {
                var classElem = section.elem.find("svg :containsMember('" + rule.codeClass + "'):not(:has(*))").closest("g");
                rule.codeMember ? classElem.find('tspan:containsMember("' + rule.codeMember + '")').addClass(rule.cssClass) : classElem.addClass(rule.cssClass);
            });
        }), $(".filtered-mermaid svg").removeAttr("height"), $(".filtered-mermaid").fadeTo(250, 1));
    };
}

function stickyScroll(event) {
    var targetBottom = lockedPosition = event.data.topOffset;
    event.data.targetElem ? (targetBottom += event.data.targetElem.offset().top + event.data.targetElem.outerHeight(), 
    lockedPosition += event.data.targetElem.position().top + event.data.targetElem.outerHeight()) : targetBottom += $(window).scrollTop();
    var triggerEvent = !1;
    targetBottom > event.data.anchorElem.offset().top ? (!event.data.scrollingElem.hasClass("stick") && event.data.scrollingElem.data("sticky-scroll-on-stick") && (triggerEvent = !0), 
    event.data.scrollingElem.addClass("stick").attr("style", "margin-top: 0; position: fixed; top: " + lockedPosition + "px; z-index: 9999; width: " + event.data.anchorElem.width() + "px"), 
    event.data.anchorElem.height(event.data.scrollingElem.outerHeight()), triggerEvent && window[event.data.scrollingElem.data("sticky-scroll-on-stick")](event.data.scrollingElem)) : (event.data.scrollingElem.hasClass("stick") && event.data.scrollingElem.data("sticky-scroll-on-unstick") && (triggerEvent = !0), 
    event.data.scrollingElem.removeClass("stick").attr("style", ""), event.data.anchorElem.height(0), 
    triggerEvent && window[event.data.scrollingElem.data("sticky-scroll-on-unstick")](event.data.scrollingElem));
}

!function(options, $) {
    $(function() {
        $("table").not(".table,.ignore").addClass("table table-striped");
    });
}(window.TEMPLATE_OPTIONS, jQuery), function(options, $) {
    $(function() {
        options.collapseSymbols && ($("dt.collapsible-symbol").each(function(i, dt) {
            var $title = $(dt), expanded = $title.hasClass("expanded"), $toggle = $("<span/>", {
                class: "pull-right toggle-icon glyphicon glyphicon-chevron-" + (expanded ? "up" : "down")
            });
            $title.find("h1,h2,h3,h4,h5").first().append($toggle);
        }).on("click", function(e) {
            var $target = $(e.target);
            if (!$target.is("a") && 0 == $target.closest("a").length && !$target.is(".checkbox,.checkbox-inline") && 0 == $target.closest(".checkbox,.checkbox-inline").length) {
                e.preventDefault();
                var $title = $(this), $icon = $title.find(".toggle-icon"), expand = !$title.hasClass("expanded"), $details = $title.next("dd.symbol-details"), $inner = $details.find("div.symbol-details-inner"), height = $details.outerHeight();
                expand ? ($icon.removeClass("glyphicon-chevron-down").addClass("glyphicon-chevron-up"), 
                height += $inner.outerHeight(), $title.add($details).addClass("expanded"), $details.addClass("transition").css("max-height", height)) : ($icon.removeClass("glyphicon-chevron-up").addClass("glyphicon-chevron-down"), 
                $title.add($details).removeClass("expanded"), $details.removeClass("transition").css("max-height", height), 
                setTimeout(function() {
                    $details.addClass("transition").css("max-height", 0);
                }, 10));
            }
        }), $("dd.collapsible-symbol").on("transitionEnd webkitTransitionEnd transitionend oTransitionEnd msTransitionEnd", function() {
            var $this = $(this);
            $this.hasClass("expanded") && $this.css("max-height", 9999);
        }));
    });
}(window.TEMPLATE_OPTIONS, jQuery), function(options, tocEnabled, $) {
    function TOC(enabled) {
        if (!(this instanceof TOC)) return new TOC(enabled);
        this.enabled = !!enabled, this._items = {
            all: [],
            h1: [],
            h2: [],
            h3: [],
            h4: []
        }, this._last = {
            h1: null,
            h2: null,
            h3: null,
            h4: null
        };
    }
    TOC.prototype._setLast = function(item) {
        switch (item.tag) {
          case "h1":
            this._last = {
                h1: item,
                h2: null,
                h3: null,
                h4: null
            };
            break;

          case "h2":
            this._last.h2 = item, this._last.h3 = this._last.h4 = null;
            break;

          case "h3":
            this._last.h3 = item, this._last.h4 = null;
            break;

          case "h4":
            this._last.h4 = item;
        }
    }, TOC.prototype._getParent = function(item) {
        for (var tag = "h" + (item.tag.substr(1) - 1), parent = this._last[tag]; !parent; ) if (tag = "h" + (tag.substr(1) - 1), 
        parent = this._last[tag], -1 === $.inArray(tag, [ "h1", "h2", "h3", "h4" ])) {
            parent = null;
            break;
        }
        return parent;
    }, TOC.prototype.parse = function() {
        var self = this;
        $(".main-content").find("h1,h2,h3,h4").each(function() {
            var $header = $(this), id = $header.attr("id");
            id || (id = self.slugify($header.text()), $header.attr("id", id)), $header.addClass("anchored").append(self.$anchorLink(id)), 
            self.enabled && self.add($header);
        });
    }, TOC.prototype.$anchorLink = function(id) {
        return $("<a/>", {
            class: "anchor-link",
            href: "#" + id
        }).append($("<i/>", {
            class: "glyphicon glyphicon-link"
        }));
    }, TOC.prototype.slugify = function(str) {
        str = (str = str.replace(/^\s+|\s+$/g, "")).toLowerCase();
        for (var from = "àáäâèéëêìíïîòóöôùúüûñç·/_,:;", i = 0, l = from.length; i < l; i++) str = str.replace(new RegExp(from.charAt(i), "g"), "aaaaeeeeiiiioooouuuunc------".charAt(i));
        return str = str.replace(/[^a-z0-9 -]/g, "").replace(/\s+/g, "-").replace(/-+/g, "-");
    }, TOC.prototype.getHTML = function($header) {
        var html = $header.clone().find(".anchor-link,.signature-returns,.signature-type,.toggle-icon").remove().end().get(0).innerHTML;
        return html ? html.replace(/<a(.*?)>|<(\/)a>/g, "<$2span$1>") : $header.text();
    }, TOC.prototype.any = function() {
        return 0 < this._items.all.length;
    }, TOC.prototype.add = function($header) {
        var item = {
            id: $header.prop("id"),
            $header: $header,
            header: $header.get(0),
            tag: $header.prop("tagName").toLowerCase(),
            dd: $header.closest("dt").next("dd").get(0),
            html: this.getHTML($header),
            children: []
        };
        if (this._items.all.push(item), this._items[item.tag].push(item), this._setLast(item), 
        "h1" != item.tag) {
            var parent = this._getParent(item);
            parent && parent.children && parent.children.push(item);
        }
        return item;
    }, TOC.prototype.items = function() {
        return this._items.h1.length ? this._items.h1 : this._items.h2.length ? this._items.h2 : this._items.h3.length ? this._items.h3 : this._items.h4.length ? this._items.h4 : [];
    }, TOC.prototype.$nav = function(items) {
        var $ul = $("<ul/>", {
            class: "nav"
        });
        items || (items = this.items(), $ul.addClass("toc-nav"));
        for (var i = 0, l = items.length; i < l; i++) {
            var classes = items[i].$header.clone().removeClass("anchored").prop("className").split(" ");
            classes.push("toc-" + items[i].tag), items[i].$li = $("<li/>", {
                class: classes.join(" ")
            }), items[i].$li.append($("<a/>", {
                href: "#" + items[i].id
            }).html(items[i].html)), items[i].children.length && items[i].$li.append(this.$nav(items[i].children)), 
            $ul.append(items[i].$li);
        }
        return $ul;
    }, TOC.prototype.scrollspy = function() {
        var self = this, $toc = $(".toc"), $parent = $toc.parent();
        $(window).on("scroll.toc", function() {
            var fixed = $parent.offset().top - 60 < $(window).scrollTop();
            $toc.toggleClass("affix", fixed);
            for (var topMost = null, i = 0, l = self._items.all.length; i < l; i++) {
                var item = self._items.all[i], rect = item.header.getBoundingClientRect();
                if (item.dd && (rect = item.dd.getBoundingClientRect()), 60 <= rect.bottom && 0 <= rect.left) {
                    topMost = item;
                    break;
                }
            }
            null != topMost && ($toc.find(".active").removeClass("active"), topMost.$li.parents("li").addBack().addClass("active"));
        }).triggerHandler("scroll.toc");
    }, TOC.prototype.$backToTop = function() {
        return $("<span/>", {
            class: "back-to-top",
            text: "Back to top"
        }).on("click", function(e) {
            e.preventDefault(), window.history ? history.replaceState(null, document.title, location.pathname + location.search) : location.hash = "", 
            $(window).triggerHandler("hashchange");
        });
    }, TOC.prototype.init = function() {
        $("nav.toc").append(this.$nav()).append(this.$backToTop()), this.scrollspy();
    }, TOC.prototype.fixColumns = function() {
        $(".main-content").removeClass("col-md-9").addClass("col-md-12"), $(".side-content").remove();
    }, TOC.prototype.offsetScroll = function(amount) {
        $(window).on("hashchange", function() {
            var $hash, id = location.hash.substr(1), top = 0;
            0 < id.length && ($hash = $('a[name="' + id + '"],[id="' + id + '"]').first()).length && (top = $hash.offset().top - amount), 
            $(window).scrollTop(top);
        }).triggerHandler("hashchange"), $("a").on("click", function(e) {
            this.hostname === location.hostname && this.pathname === location.pathname && (e.preventDefault(), 
            window.history ? history.replaceState(null, document.title, location.pathname + location.search + this.hash) : location.hash = this.hash, 
            $(window).triggerHandler("hashchange"));
        });
    }, $(function() {
        var toc = new TOC(tocEnabled);
        toc.parse(), toc.enabled && toc.any() ? toc.init() : toc.fixColumns(), toc.offsetScroll(60);
    });
}(window.TEMPLATE_OPTIONS, window.DOCLET_TOC_ENABLED, jQuery), function(options, enabled, $) {
    function AccessFilter() {
        if (!(this instanceof AccessFilter)) return new AccessFilter();
        this.$toggleInherited = $(), this.$togglePublic = $(), this.$toggleProtected = $(), 
        this.$togglePrivate = $(), this.inherited = !1, this.public = !1, this.protected = !1, 
        this.private = !1;
    }
    $.extend(AccessFilter.prototype, {
        init: function() {
            this.$toggleInherited = $(".access-filter .toggle-inherited").on("change", {
                self: this
            }, this.onInheritedChanged), this.setInherited(), this.$togglePublic = $(".access-filter .toggle-public").on("change", {
                self: this
            }, this.onPublicChanged), this.setPublic(), this.$toggleProtected = $(".access-filter .toggle-protected").on("change", {
                self: this
            }, this.onProtectedChanged), this.setProtected(), this.$togglePrivate = $(".access-filter .toggle-private").on("change", {
                self: this
            }, this.onPrivateChanged), this.setPrivate();
        },
        setInherited: function() {
            if (0 < this.$toggleInherited.length) {
                this.inherited = this.$toggleInherited.prop("checked");
                var $elem = $(".symbol-title.inherited,.symbol-details.inherited,li.inherited");
                this.inherited && !this.public && ($elem = $elem.not(".public")), this.inherited && !this.protected && ($elem = $elem.not(".protected")), 
                this.inherited && !this.private && ($elem = $elem.not(".private")), ($elem = $elem.add($elem.filter(".symbol-title").prev("hr"))).toggle(this.inherited), 
                this.$toggleInherited.closest(".checkbox-inline").toggleClass("checked", this.inherited), 
                $(".language-mermaid").toggleClass("inherited"), mermaid.rerender && mermaid.rerender();
            }
        },
        setPublic: function() {
            if (0 < this.$togglePublic.length) {
                this.public = this.$togglePublic.prop("checked");
                var $elem = $(".symbol-title.public,.symbol-details.public,li.public");
                this.inherited || ($elem = $elem.not(".inherited")), ($elem = $elem.add($elem.filter(".symbol-title").prev("hr"))).toggle(this.public), 
                this.$togglePublic.closest(".checkbox-inline").toggleClass("checked", this.public), 
                $(".language-mermaid").toggleClass("public"), mermaid.rerender && mermaid.rerender();
            }
        },
        setProtected: function() {
            if (0 < this.$toggleProtected.length) {
                this.protected = this.$toggleProtected.prop("checked");
                var $elem = $(".symbol-title.protected,.symbol-details.protected,li.protected");
                this.inherited || ($elem = $elem.not(".inherited")), ($elem = $elem.add($elem.filter(".symbol-title").prev("hr"))).toggle(this.protected), 
                this.$toggleProtected.closest(".checkbox-inline").toggleClass("checked", this.protected), 
                $(".language-mermaid").toggleClass("protected"), mermaid.rerender && mermaid.rerender();
            }
        },
        setPrivate: function() {
            if (0 < this.$togglePrivate.length) {
                this.private = this.$togglePrivate.prop("checked");
                var $elem = $(".symbol-title.private,.symbol-details.private,li.private");
                this.inherited || ($elem = $elem.not(".inherited")), ($elem = $elem.add($elem.filter(".symbol-title").prev("hr"))).toggle(this.private), 
                this.$togglePrivate.closest(".checkbox-inline").toggleClass("checked", this.private), 
                $(".language-mermaid").toggleClass("private"), mermaid.rerender && mermaid.rerender();
            }
        },
        onInheritedChanged: function(e) {
            e.data.self.setInherited();
        },
        onPublicChanged: function(e) {
            e.data.self.setPublic();
        },
        onProtectedChanged: function(e) {
            e.data.self.setProtected();
        },
        onPrivateChanged: function(e) {
            e.data.self.setPrivate();
        }
    }), $(function() {
        enabled && new AccessFilter().init();
    });
}(window.TEMPLATE_OPTIONS, window.DOCLET_AFILTER_ENABLED, jQuery), function(options, $) {
    function LunrDatabase() {
        if (!(this instanceof LunrDatabase)) return new LunrDatabase();
        this.index = {}, this.store = {}, this.loaded = !1;
    }
    function LunrSearch() {
        if (!(this instanceof LunrSearch)) return new LunrSearch();
        this.db = new LunrDatabase(), this.$input = $("#lunr-search-input").on("keyup", {
            self: this
        }, this.onKeyup), this.$submit = $("#lunr-search-submit").on("click", {
            self: this
        }, this.onClick), this.$modal = $("#lunr-search-modal"), this.$body = $("#lunr-search-body"), 
        this.$footer = $("#lunr-search-footer"), this.$pagination = $(), this.limit = 5;
    }
    if (LunrDatabase.prototype.load = function() {
        var self = this;
        return $.get("js/lunr-data.json").then(function(results) {
            self.store = results.store, self.index = lunr.Index.load(results.index), self.loaded = !0;
        });
    }, LunrDatabase.prototype.loadEmbed = function() {
        this.store = window.lunrData.store, this.index = lunr.Index.load(window.lunrData.index), 
        this.loaded = !0;
    }, LunrDatabase.prototype.search = function(query) {
        var self = this;
        return $.Deferred(function(def) {
            self.loaded ? def.resolve(self._search(query)) : window.useLunrData ? (self.loadEmbed(), 
            def.resolve(self._search(query))) : self.load().then(function() {
                def.resolve(self._search(query));
            }, def.reject);
        });
    }, LunrDatabase.prototype._search = function(query) {
        var self = this, results = [], raw = this.index.search(query);
        return $.each(raw, function(i, result) {
            results.push(self.store[result.ref]);
        }), results;
    }, LunrSearch.prototype.$createPagination = function(totalPages) {
        if (totalPages <= 1) return $();
        for (var $ul = $("<ul/>", {
            class: "pagination pagination-sm pull-left"
        }), i = 0; i < totalPages; i++) {
            var $link = $("<a/>", {
                href: "#lunr-search-result-page-" + i,
                text: i + 1
            }).on("click", {
                self: this
            }, this.onPaginationClick), $li = $("<li/>").append($link);
            0 == i && $li.addClass("active"), $ul.append($li);
        }
        return $ul;
    }, LunrSearch.prototype.onPaginationClick = function(e) {
        e.preventDefault();
        var self = e.data.self, $this = $(this), target = $this.attr("href");
        self.$body.find(".lunr-search-results-page").removeClass("active"), self.$body.find(target).addClass("active"), 
        self.$pagination.find("li").removeClass("active"), $this.closest("li").addClass("active");
    }, LunrSearch.prototype.start = function(query) {
        var self = this;
        return this.db.search(query).then(function(results) {
            var pages = [], index = -1;
            $.each(results, function(i, result) {
                i % self.limit == 0 && (index = pages.push([]) - 1), pages[index].push(result);
            }), self.$body.empty(), $.each(pages, function(i, page) {
                var $ul = $("<ul/>", {
                    class: "lunr-search-results-page",
                    id: "lunr-search-result-page-" + i
                });
                0 == i && $ul.addClass("active"), $.each(page, function(i, result) {
                    var kind = result.kind;
                    "function" === kind && (kind = "method");
                    var $li = $("<li/>"), $a = $("<a/>", {
                        href: result.id,
                        class: "lunr-search-result-title"
                    }).html(result.title).prepend($("<span/>", {
                        class: "lunr-search-result-kind",
                        text: result.kind + ": "
                    }));
                    $li.append($a), $li.append($("<p/>", {
                        class: "lunr-search-result-url"
                    }).text($a.prop("href"))), $li.append($("<p/>", {
                        class: "lunr-search-result-summary"
                    }).text(result.summary)), $ul.append($li);
                }), self.$body.append($ul);
            }), self.$pagination.length && self.$pagination.remove(), self.$pagination = self.$createPagination(pages.length), 
            self.$footer.prepend(self.$pagination), self.$modal.modal({
                show: !0
            });
        });
    }, LunrSearch.prototype.onKeyup = function(e) {
        13 === e.keyCode && (e.preventDefault(), e.data.self.start(e.data.self.$input.val()));
    }, LunrSearch.prototype.onClick = function(e) {
        e.preventDefault(), e.data.self.start(e.data.self.$input.val());
    }, window.LunrSearch = LunrSearch, "http" !== location.protocol.substr(0, 4)) {
        var script = document.createElement("script");
        script.type = "text/javascript", script.src = "js/lunr-data.js", document.body.appendChild(script), 
        window.useLunrData = !0;
    }
    $(function() {
        window.lunrSearch = new LunrSearch();
    });
}(window.TEMPLATE_OPTIONS, jQuery), function(options, $) {
    $(function() {
        $("button.code-run").on("click", function(e) {
            var $this = $(this), $textarea = $this.parent("p").next("textarea");
            0 == $textarea.length && ($textarea = $("<textarea/>", {
                class: "form-control dummy-console",
                rows: 5
            }).insertAfter($this.parent("p")));
            var code = $this.prev('input[type="hidden"]').val(), write = function(arg, argN) {
                var args = Array.prototype.slice.call(arguments), current = $textarea.val();
                $.each(args, function(i, arg) {
                    0 < i && (current += ", "), current += JSON.stringify(arg);
                }), current += "\n", $textarea.val(current);
            };
            new Function("console", code)({
                info: write,
                error: write,
                warn: write,
                log: write
            });
        });
    });
}(window.TEMPLATE_OPTIONS, jQuery), function(options) {
    var i, s, o, r, a, m;
    options.analytics && options.analytics.ua && options.analytics.domain && (i = window, 
    s = document, o = "script", r = "ga", i.GoogleAnalyticsObject = r, i.ga = i.ga || function() {
        (i.ga.q = i.ga.q || []).push(arguments);
    }, i.ga.l = 1 * new Date(), a = s.createElement(o), m = s.getElementsByTagName(o)[0], 
    a.async = 1, a.src = "//www.google-analytics.com/analytics.js", m.parentNode.insertBefore(a, m), 
    ga("create", options.analytics.ua, options.analytics.domain), ga("send", "pageview"));
}(window.TEMPLATE_OPTIONS), $(function() {
    $(".sticky-scroll").length && $(".sticky-scroll").each(function() {
        var anchorElem = $("<div></div>").insertBefore($(this));
        anchorElem.attr("class", $(this).attr("class")), anchorElem.removeClass("sticky-scroll");
        var targetElem, offset = 0;
        if ($(this).data("sticky-scroll-target")) {
            var target = $($(this).data("sticky-scroll-target"));
            target.length ? targetElem = target : console.error("StickyScroll unable to locate target " + $(this).data("sticky-scroll-target"));
        }
        $(this).data("sticky-scroll-offset") && (offset += $(this).data("sticky-scroll-offset"));
        var eventData = {
            scrollingElem: $(this),
            anchorElem: anchorElem,
            targetElem: targetElem,
            topOffset: offset
        };
        $(window).scroll(eventData, stickyScroll).resize(eventData, stickyScroll), stickyScroll({
            data: eventData
        });
    });
});